{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f7e90b73_680fb89c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "Can you please add a link to the specification in the commit message?\n\nI think it\u0027s also worth noting here that it makes use of the \"raw\" KCS chardev, which is not likely to go into the upstream kernel at any point.",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82a96a57_d61381e5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2023-10-04T14:13:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f7e90b73_680fb89c",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6000796_63b148a3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "Hi Konstantin, I\u0027ve left a few comments. The most significant issue is the implementation blocks rather than driving a state machine through polling for file descriptor readiness.\n\nAlso not sure how much effort you want to put into this given you have the kernel implementation getting reviews upstream.",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "879da320_ffd4d58c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2023-10-04T14:13:15Z",
      "side": 1,
      "message": "Yeah, the motivation to refactor all of the code to state machine logic is very low at this point. Not sure if I\u0027ll find the time to do all of this.\n\nBut nevertheless since the current solution is working I think it would be nice to make it a good patch at least. I\u0027ve corrected all the other comments that you\u0027ve left.\n\nBTW, can we still merge:\n\n`66497: astlpc: Provide KCS device path as a binding argument` | https://gerrit.openbmc.org/c/openbmc/libmctp/+/66497\n\n`66498: libmctp: Drop \u0027astlpc-raw-kcs\u0027 PACKAGECONFIG option` | https://gerrit.openbmc.org/c/openbmc/openbmc/+/66498\n\n?",
      "parentUuid": "b6000796_63b148a3",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e3e17be_a62200b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-05T00:44:40Z",
      "side": 1,
      "message": "I\u0027ve merged the libmctp patch, we\u0027ll have to squash the recipe patch into the bump when it appears.",
      "parentUuid": "879da320_ffd4d58c",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc12fae3_225953ae",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "Perhaps state here that Table 1 defines the PEC in terms of the SMBus specification, with a link to the SMBus specification.\n\nThat said, on what basis do we ignore bit 8? What is the source of that assertion?",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cddf5764_d4d5e27c",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2023-10-04T14:13:15Z",
      "side": 1,
      "message": "All this algorithm along with the comments was copied from the edk2 code.\n\nIn the kernel driver I\u0027ve verified that I can just use standard \u0027i2c_smbus_pec\u0027 from the \nhttps://github.com/torvalds/linux/blob/71e58659bfc02e4171345f80b13d6485e9cdf687/drivers/i2c/i2c-core-smbus.c#L28 instead. So I probably copy that code and refer to kernel. I think this would be more clear.",
      "parentUuid": "bc12fae3_225953ae",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "beb3c17d_09cc3f91",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-05T01:01:38Z",
      "side": 1,
      "message": "What\u0027s the license of the EDK2 code? Regarding the kernel, you can\u0027t immediately copy that code in as it will be under a GPL license, which is not compatible with Apache-2.\n\nThere may be some room to move as the routines are short and fairly universal, but we need to be cautious.",
      "parentUuid": "cddf5764_d4d5e27c",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c85d938_18cc7931",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2023-10-05T21:02:56Z",
      "side": 1,
      "message": "I\u0027m not an expert on the license stuff, but here I can see:\n```\nSPDX-License-Identifier: BSD-2-Clause-Patent\n```\nhttps://github.com/tianocore/edk2-platforms/blob/master/License.txt\n\nThere is also a `License-History` file in the repository:\n```\nhttps://github.com/tianocore/edk2-platforms/blob/master/License-History.txt\n```\nWhat does it mean for us?",
      "parentUuid": "beb3c17d_09cc3f91",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e5db394_4b997e44",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-06T00:09:52Z",
      "side": 1,
      "message": "My brief investigation suggests Apache-2 and BSD-2-Clause should be fine. However, we need to abide by the BSD requirements and make sure the copyright information is retained (along with the SPDX license specifier). I think it would be easiest to do this in its own file. If you don\u0027t mind creating a crc8.c and moving it there that would help.",
      "parentUuid": "3c85d938_18cc7931",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6e03a0e_41d2fdfb",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 103,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "I\u0027ve developed a bit of a preference for avoiding `__attribute__((packed))` where we can. It\u0027s non-standard, and the compiler is smart enough to optimise away `memcpy()` calls.\n\nHowever, this is just an implementation detail. We\u0027re not spraying `__attribute__((packed))` over structs visible in the public headers (unlike other libraries I\u0027m aware of). If you\u0027re happy to change it that would be nice, but I won\u0027t require you do so.",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b755feb_aea8b0ea",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "Generally capitalisation is used for constants. I\u0027d prefer we `s/PEC/pec/`.",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa6cf183_dec7c325",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 106,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2023-10-04T14:13:15Z",
      "side": 1,
      "message": "Done\n\nI\u0027ve also renamed the fields in the header as they are named in the kernel driver:\n```\nnetFnAndLUN   -\u003e netfn_lun\ndefiningBody  -\u003e defining_body\n```",
      "parentUuid": "0b755feb_aea8b0ea",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2515ac16_8d82aaf2",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 107,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "As above.",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a456b53_61235c7f",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 129,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "Why `void *`?",
      "range": {
        "startLine": 129,
        "startChar": 25,
        "endLine": 129,
        "endChar": 34
      },
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ccf20919_9c213c59",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 129,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2023-10-04T14:13:15Z",
      "side": 1,
      "message": "I\u0027ve replaced it to `struct mctp_binding_kcs *kcs`.\nNot sure why I did `void` initially",
      "parentUuid": "0a456b53_61235c7f",
      "range": {
        "startLine": 129,
        "startChar": 25,
        "endLine": 129,
        "endChar": 34
      },
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8076b9e9_36072832",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 138,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "Perhaps we could defer to strace here?",
      "range": {
        "startLine": 137,
        "startChar": 1,
        "endLine": 138,
        "endChar": 16
      },
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "578ecae4_61d263f2",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 138,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2023-10-04T14:13:15Z",
      "side": 1,
      "message": "I don\u0027t usually have strace in my builds for example. So for me prints are preferred approach.\n\nBut I\u0027ve dropped them for your request",
      "parentUuid": "8076b9e9_36072832",
      "range": {
        "startLine": 137,
        "startChar": 1,
        "endLine": 138,
        "endChar": 16
      },
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07796b4d_fe16accc",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 142,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "Why `void *`?",
      "range": {
        "startLine": 142,
        "startChar": 26,
        "endLine": 142,
        "endChar": 35
      },
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f30cf2b0_bb49a9ff",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 142,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2023-10-04T14:13:15Z",
      "side": 1,
      "message": "I\u0027ve replaced it to `struct mctp_binding_kcs *kcs`.\nNot sure why I did `void` initially",
      "parentUuid": "07796b4d_fe16accc",
      "range": {
        "startLine": 142,
        "startChar": 26,
        "endLine": 142,
        "endChar": 35
      },
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3841c81_4ed71e38",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 150,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "Again, these values are all something we can determine with strace.",
      "range": {
        "startLine": 149,
        "startChar": 1,
        "endLine": 150,
        "endChar": 10
      },
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a21b9057_6ac4a7dc",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 150,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2023-10-04T14:13:15Z",
      "side": 1,
      "message": "I don\u0027t usually have strace in my builds for example. So for me prints are preferred approach.\n\nBut I\u0027ve dropped them for your request",
      "parentUuid": "f3841c81_4ed71e38",
      "range": {
        "startLine": 149,
        "startChar": 1,
        "endLine": 150,
        "endChar": 10
      },
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45cd9a4d_750d3314",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 165,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "On the BMC side a write to the status register updates the status (unlike the host side, which puts data into ODR and sets the Command bit in the status register). This should be called `mctp_kcs_write_status()`.",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "910802f6_24437538",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 165,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2023-10-04T14:13:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "45cd9a4d_750d3314",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b837510_78f35559",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 198,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "I\u0027d prefer we learn the lessons from having to convert the astlpc driver from blocking to polling. Can you please implement the binding as a state machine driven by events on the raw KCS file descriptor instead?",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12ec70e8_d0ddfa0c",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 279,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "We already have `crc32.h` and `crc32.c`. Maybe pull this out into `crc8.h` and `crc8.c`? Or amalgamate both into just `crc.h` and `crc.c`. Ideally we\u0027d add some tests as well.\n\nAlso, do we need to be generic over the polynomial?",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b52d4b7c_af2b7a65",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 279,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2023-10-04T14:13:15Z",
      "side": 1,
      "message": "Would it be okay if we write it like this?\n\nKernel also have a function generic over the polynomial. But at the same time the POLY is fixed as define, so I\u0027m not sure if it should be placed in something called `crc.c`. We can make `crc8` to accept `poly` as an argument to keep all the SMBUS stuff out of the `crc.c`. But in this case the code would be not identical to kernel.\n\nhttps://github.com/torvalds/linux/blob/71e58659bfc02e4171345f80b13d6485e9cdf687/drivers/i2c/i2c-core-smbus.c#L28\n```\n#define POLY    (0x1070U \u003c\u003c 3)\nstatic uint8_t crc8(uint16_t data)\n{\n        int i;\n\n        for (i \u003d 0; i \u003c 8; i++) {\n                if (data \u0026 0x8000)\n                        data \u003d data ^ POLY;\n                data \u003d data \u003c\u003c 1;\n        }\n        return (uint8_t)(data \u003e\u003e 8);\n}\n\n// Packet error code (PEC), as defined in the SMBus 2.0 Specification\n// PEC calculation algorithm is copied from the \u0027linux/drivers/i2c/i2c-core-smbus.c\u0027 driver\nstatic uint8_t i2c_smbus_pec(uint8_t crc, uint8_t *p, size_t count)\n{\n        int i;\n\n        for (i \u003d 0; i \u003c count; i++)\n                crc \u003d crc8((crc ^ p[i]) \u003c\u003c 8);\n        return crc;\n}\n```",
      "parentUuid": "12ec70e8_d0ddfa0c",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e6b344c_b8e5a0d5",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 279,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-06T00:09:52Z",
      "side": 1,
      "message": "Okay. I don\u0027t mind, I was just curious about whether we needed to be generic over the polynomial. I don\u0027t think we do. We can bake the polynomial into the implementation and call it `crc8_ccitt()` in accordance with the table here:\n\nhttps://en.wikipedia.org/wiki/Cyclic_redundancy_check#Polynomial_representations_of_cyclic_redundancy_checks\n\nOtherwise, my concern here is mixing GPLv2 kernel code with other licenses. If you\u0027ve used the BSD-2-Clause EDK2 as a reference let\u0027s keep that. See my comment above about separating out the implementation into `crc8.c`.",
      "parentUuid": "b52d4b7c_af2b7a65",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5608c0c_68f759e3",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 325,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "This might be a slightly less tedious using designated initialisers:\n\n```\nstruct mctp_kcs_header kcs_hdr \u003d {\n    .netFnAndLUN \u003d MCTP_KCS_NETFN_LUN;\n    .definingBody \u003d DEFINING_BODY_DMTF_PRE_OS_WORKING_GROUP;\n    .len \u003d mctp_pktbuf_size(pkt);\n};\n```",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7c4c5e8_19303c74",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 325,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2023-10-04T14:13:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c5608c0c_68f759e3",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b52f0f47_1c3e020b",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 334,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "libmctp tries to follow kernel style. While any reasonably recent GCC supports mixed declarations and statements it would be nice to group the declarations at the top of the function.",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2bb043b8_f8e0534d",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 334,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2023-10-04T14:13:15Z",
      "side": 1,
      "message": "Done. Move all of the declaration to the function start here and in other places",
      "parentUuid": "b52f0f47_1c3e020b",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce651729_38502d03",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 336,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "`memcpy(send_buf, \u0026kcs_hdr, sizeof(kcs_hdr));`",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4981936c_9dd478d9",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 336,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2023-10-04T14:13:15Z",
      "side": 1,
      "message": "Done\n\nI\u0027ve renamed all\n```\nsizeof(struct ...)\n```\nto\n```\nsizeof(*ptr_to_struct)\n```\nor\n```\nsizeof(struct_variable)\n```",
      "parentUuid": "ce651729_38502d03",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e377579a_eee0b04f",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 338,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "Maybe a comment here that this can\u0027t overflow as `kcs_hdr.len` is `uint8_t`, which is accounted for by the 256 in the declaration of `send_buf`?",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de1d6999_d7049214",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 338,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2023-10-04T14:13:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e377579a_eee0b04f",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "605e03f5_331a1ac6",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 340,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "If we\u0027re going to stick with packed structs, this should be `memcpy(..., \u0026kcs_tlr, sizeof(kcs_tlr));`",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4da5a1d7_a4b187aa",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 340,
      "author": {
        "id": 1000926
      },
      "writtenOn": "2023-10-04T14:13:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "605e03f5_331a1ac6",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49836de1_463f16ab",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 351,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "See previous comments about this being a state machine rather than a blocking loop.",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52da84c2_6b5d1209",
        "filename": "kcs.c",
        "patchSetId": 4
      },
      "lineNbr": 462,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2023-10-04T00:43:32Z",
      "side": 1,
      "message": "Again, this should be a state machine whose actions hand control back to the caller without blocking.",
      "revId": "54242e25ae072e02911ddfc9d3b4487a14382904",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}