{
  "comments": [
    {
      "key": {
        "uuid": "1ef2d620_9cd8e893",
        "filename": "core.c",
        "patchSetId": 4
      },
      "lineNbr": 542,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-07-17T02:14:35Z",
      "side": 1,
      "message": "1. We are going to have a problem here, when bridging concept (in review) by andrew get\u0027s merged. \nIn case of bridging, there will be a chance that it is the only packet, and we can\u0027t even find EOM packet for it (as it will come late). So, we need to watch other stuff as well. (i.e. EID / MsgTag along with EOM monitoring, or else it\u0027s better to have a index count / relation count in the pkt so that the same can be dropped).",
      "range": {
        "startLine": 537,
        "startChar": 0,
        "endLine": 542,
        "endChar": 2
      },
      "revId": "61e8bc3ec9b1a1f76d814527b4bb2dac2a349b27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e74e9adb_1766ab27",
        "filename": "core.c",
        "patchSetId": 4
      },
      "lineNbr": 542,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-07-20T09:33:35Z",
      "side": 1,
      "message": "That\u0027s a fair point; the optimisation was based on the assumption that we were queuing entire messages-worth of packets. Seems James had it right :)",
      "parentUuid": "1ef2d620_9cd8e893",
      "range": {
        "startLine": 537,
        "startChar": 0,
        "endLine": 542,
        "endChar": 2
      },
      "revId": "61e8bc3ec9b1a1f76d814527b4bb2dac2a349b27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be4ac6e3_6f20baee",
        "filename": "core.c",
        "patchSetId": 4
      },
      "lineNbr": 551,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-07-17T02:14:35Z",
      "side": 1,
      "message": "Not related to this patch, but better to have a ERROR NO for this",
      "range": {
        "startLine": 551,
        "startChar": 9,
        "endLine": 551,
        "endChar": 12
      },
      "revId": "61e8bc3ec9b1a1f76d814527b4bb2dac2a349b27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a16e3c70_5a5ed933",
        "filename": "core.c",
        "patchSetId": 4
      },
      "lineNbr": 551,
      "author": {
        "id": 1000410
      },
      "writtenOn": "2020-07-17T08:52:30Z",
      "side": 1,
      "message": "I had introduced it but Andrew suggested to drop it.",
      "parentUuid": "be4ac6e3_6f20baee",
      "range": {
        "startLine": 551,
        "startChar": 9,
        "endLine": 551,
        "endChar": 12
      },
      "revId": "61e8bc3ec9b1a1f76d814527b4bb2dac2a349b27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52f5f182_68dd6b2e",
        "filename": "core.c",
        "patchSetId": 4
      },
      "lineNbr": 551,
      "author": {
        "id": 1000410
      },
      "writtenOn": "2020-07-17T08:59:46Z",
      "side": 1,
      "message": "That would be mostly avoid introducing new symbols",
      "parentUuid": "a16e3c70_5a5ed933",
      "range": {
        "startLine": 551,
        "startChar": 9,
        "endLine": 551,
        "endChar": 12
      },
      "revId": "61e8bc3ec9b1a1f76d814527b4bb2dac2a349b27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d1b921d_abad37a3",
        "filename": "core.c",
        "patchSetId": 4
      },
      "lineNbr": 551,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-07-20T04:46:50Z",
      "side": 1,
      "message": "hmm i meant to say re-using existing erorr codes \nSay EBUSY or  something to tell that interface is busy and retry it at later stage, rest of the error, we don\u0027t need to stop, we continue with next packet processing.",
      "parentUuid": "52f5f182_68dd6b2e",
      "range": {
        "startLine": 551,
        "startChar": 9,
        "endLine": 551,
        "endChar": 12
      },
      "revId": "61e8bc3ec9b1a1f76d814527b4bb2dac2a349b27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8252c37_797b8f6e",
        "filename": "core.c",
        "patchSetId": 4
      },
      "lineNbr": 551,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-07-20T09:33:35Z",
      "side": 1,
      "message": "I\u0027m not opposed to a proper errno. We might want to eventually do some analysis and define our own errnos so we don\u0027t leak unix-y implementation details through the API (but leaning on unix-y solutions is a cheap and cheerful place to start).",
      "parentUuid": "8d1b921d_abad37a3",
      "range": {
        "startLine": 551,
        "startChar": 9,
        "endLine": 551,
        "endChar": 12
      },
      "revId": "61e8bc3ec9b1a1f76d814527b4bb2dac2a349b27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c8a0281_45de7b77",
        "filename": "core.c",
        "patchSetId": 4
      },
      "lineNbr": 571,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-07-17T02:14:35Z",
      "side": 1,
      "message": "we should break only if it is due to tx_enabled \u003d\u003d false error, for other packets we must continue\ni.e. Just because one packet transmission failed, we shouldn\u0027t break for others, we must continue till the queue is empty or till tx_enabled becomes false.",
      "range": {
        "startLine": 570,
        "startChar": 2,
        "endLine": 571,
        "endChar": 10
      },
      "revId": "61e8bc3ec9b1a1f76d814527b4bb2dac2a349b27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea052c47_49eaf1fd",
        "filename": "core.c",
        "patchSetId": 4
      },
      "lineNbr": 571,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-07-20T09:33:35Z",
      "side": 1,
      "message": "I don\u0027t think that\u0027s a strong requirement. Packets will always end up in the queue and the queue will eventually be processed. I think what you\u0027re concerned about is latency. That\u0027s probably a wider discussion.",
      "parentUuid": "1c8a0281_45de7b77",
      "range": {
        "startLine": 570,
        "startChar": 2,
        "endLine": 571,
        "endChar": 10
      },
      "revId": "61e8bc3ec9b1a1f76d814527b4bb2dac2a349b27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf0147e5_5062215a",
        "filename": "core.c",
        "patchSetId": 4
      },
      "lineNbr": 642,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-07-17T02:14:35Z",
      "side": 1,
      "message": "this is going to cause confusion.\ni.e. \nWith current code in place, we may end up sending error of the packet which is already in queue, which is getting dropped and it will cause confusion.\n\nElse we need to ignore tx_enabled \u003d\u003d false error, and can propagate only the last transmission error to the packet (when we transmit the whole queue). \n\nAnyway, application can never know this one for sure, and hence there is no point in indicating error through this mechanism.",
      "range": {
        "startLine": 642,
        "startChar": 1,
        "endLine": 642,
        "endChar": 32
      },
      "revId": "61e8bc3ec9b1a1f76d814527b4bb2dac2a349b27",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}