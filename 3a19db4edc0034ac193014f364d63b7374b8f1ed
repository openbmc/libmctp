{
  "comments": [
    {
      "key": {
        "uuid": "23fce704_06332f1b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-07-07T06:04:21Z",
      "side": 1,
      "message": "I ended up fixing this, so note to self to remove it.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 20,
        "endChar": 50
      },
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fe17430_11891f6d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-11-09T03:28:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "23fce704_06332f1b",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 20,
        "endChar": 50
      },
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e7769f9_7398a7eb",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2020-07-06T07:13:28Z",
      "side": 1,
      "message": "So we used to use struct mctp_bus to represent attaching an EID to a binding (essentially, just a (binding, eid) pair). Now that we\u0027re using the route table, is that separation of binding and bus still needed? ie., should we move all of this into struct mctp_binding perhaps?\n\n[This may help with future confusion - you have mctp_bus_* functions below that operate on a binding, not a bus]",
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0df1e35c_0beb60e9",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-07-07T06:04:21Z",
      "side": 1,
      "message": "Right, yeah, I think you\u0027re onto something there. Though the naming of the mctp_bus_* functions was pretty loosely done, I just needed a name and didn\u0027t really consider your distinction above :)",
      "parentUuid": "2e7769f9_7398a7eb",
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "555ae99c_88c3954d",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-11-09T06:05:47Z",
      "side": 1,
      "message": "Actually, it might pay to keep `struct mctp_bus` to hold at least the bus ID, as this isn\u0027t really something that\u0027s of direct concern to the binding implementation (it\u0027s bridge-configuration-dependent). I think we can discuss shifting the other members out of `struct mctp_bus` outside of this series.\n\nI\u0027ll fix up the function names though.",
      "parentUuid": "0df1e35c_0beb60e9",
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6391362_b845db80",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 26,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-11-09T11:12:50Z",
      "side": 1,
      "message": "Done. I\u0027ve renamed mctp_bus_rx() as well (as a separate patch), given it took a binding pointer as a parameter.",
      "parentUuid": "555ae99c_88c3954d",
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0322c1f8_cc485a87",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 1020,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2020-07-06T07:13:28Z",
      "side": 1,
      "message": "Should we provide a low-level bus_register function that does not pass an EID? This current function would then be a helper to do that registration and create the route.",
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f9952bd_afffe27a",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 1020,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-07-07T06:04:21Z",
      "side": 1,
      "message": "Right! And that would get rid of the caveat in the docs in the header. I like it.",
      "parentUuid": "0322c1f8_cc485a87",
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fedba1f_da72c247",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 1020,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-11-09T11:12:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8f9952bd_afffe27a",
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0bcd3cb3_f6f05c79",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 1024,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-07-15T09:32:57Z",
      "side": 1,
      "message": "this must be LOCAL right?\nThis ENDPOINT is kind of confusing with the usage. I visualize only 3 routing types,\nUPSTREAM, DOWNSTREAM \u0026 LOCAL. We will provide routing table update accordingly based on the bus in which the request came in right? that\u0027s the plan right?\n\nSay Figure 11 in the base spec DSP0236 1.3.1\nBridge X has 2 ports, and it will not advertise EID8 to the bridge y through routing table, instead it will indicate EID 11(Self), EID12,13 (Device A \u0026 B), EID 17(Bridge + EID18-EID19 through Bridge z), EID 9to 10 (through Bridge self - through bus 1). itself.",
      "range": {
        "startLine": 1024,
        "startChar": 11,
        "endLine": 1024,
        "endChar": 36
      },
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a41c6131_df474c88",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 1024,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-07-27T03:56:48Z",
      "side": 1,
      "message": "Ignore the comment regarding LOCAL. As discussed in WG, ENDPOINT usage is correct here.",
      "parentUuid": "0bcd3cb3_f6f05c79",
      "range": {
        "startLine": 1024,
        "startChar": 11,
        "endLine": 1024,
        "endChar": 36
      },
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6aa12f5f_be0bd731",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 1024,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-11-09T03:28:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a41c6131_df474c88",
      "range": {
        "startLine": 1024,
        "startChar": 11,
        "endLine": 1024,
        "endChar": 36
      },
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bdb12e5d_8b4547f1",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 1070,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2020-07-06T07:13:28Z",
      "side": 1,
      "message": "This might be neater to just assign to route.range / route.type / route.device directly.",
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02ced409_e36c47a0",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 1070,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-07-07T06:04:21Z",
      "side": 1,
      "message": "Yeah, I experimented with this approach to avoid the visual redundancy, but I\u0027m not sure it\u0027s any clearer with the extra line noise. However, we\u0027d have an extra two lines then to assign to the range and device members:\n\n route.range.first \u003d eid1;\n route.range.last \u003d eid1;\n route.type \u003d MCTP_ROUTE_TYPE_LOCAL;\n route.device.bus \u003d 0;\n route.device.address \u003d 0;\n\nPerhaps your suggestion is less surprising and that\u0027s a readability win its own right...",
      "parentUuid": "bdb12e5d_8b4547f1",
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68981f4e_3ab46e19",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 1070,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-11-09T11:12:50Z",
      "side": 1,
      "message": "Leaving it as is to avoid more patch churn. We can replace it later if the pattern irritates enough people.",
      "parentUuid": "02ced409_e36c47a0",
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "081ffaad_8771da15",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 1233,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-07-15T09:32:57Z",
      "side": 1,
      "message": "this brings another perspective, that the pkt header pad must be the largest of binding medium supported. \nLet me know if you disagree, if you agree, then this can be of separate commit",
      "range": {
        "startLine": 1231,
        "startChar": 0,
        "endLine": 1233,
        "endChar": 34
      },
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44a7f6ce_89825684",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 1233,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-11-09T03:28:00Z",
      "side": 1,
      "message": "I think this is addressed by my series to better exploit the packet padding. Let me follow up.",
      "parentUuid": "081ffaad_8771da15",
      "range": {
        "startLine": 1231,
        "startChar": 0,
        "endLine": 1233,
        "endChar": 34
      },
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1645e1c_eece3a3f",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 1233,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-11-09T11:12:50Z",
      "side": 1,
      "message": "As it stands at this patch the two upstream binding implementations don\u0027t pack the medium-specific header into the packet (they do kinda ad-hoc packing of the data instead), so this isn\u0027t a concern *yet*. This changes with the patches later in the series to better exploit the packet padding as I noted above, but the issue you identified here also gets fixed.",
      "parentUuid": "44a7f6ce_89825684",
      "range": {
        "startLine": 1231,
        "startChar": 0,
        "endLine": 1233,
        "endChar": 34
      },
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e706aaf6_daee665a",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 1354,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-07-15T09:32:57Z",
      "side": 1,
      "message": "when we support multiple bus registration in single bridge, then EID match will happen for the port EID (self) of different bus too. Do we allow it ?",
      "range": {
        "startLine": 1354,
        "startChar": 9,
        "endLine": 1354,
        "endChar": 30
      },
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ac8d65d_014fdc68",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 1354,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-11-09T03:28:00Z",
      "side": 1,
      "message": "Yes, this is handled by the lookup. It will find the entry in the route table that matches `dest`. Below we test if the result is of route type MCTP_ROUTE_TYPE_ENDPOINT, and if it is we deliver it locally.",
      "parentUuid": "e706aaf6_daee665a",
      "range": {
        "startLine": 1354,
        "startChar": 9,
        "endLine": 1354,
        "endChar": 30
      },
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6ae0065_44db1c7b",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 1444,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-07-07T06:04:21Z",
      "side": 1,
      "message": "Can pull this call out along with the call on 1455 and put it before the return.",
      "range": {
        "startLine": 1444,
        "startChar": 2,
        "endLine": 1444,
        "endChar": 24
      },
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc9d99a6_d285bafa",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 1444,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-11-09T03:28:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d6ae0065_44db1c7b",
      "range": {
        "startLine": 1444,
        "startChar": 2,
        "endLine": 1444,
        "endChar": 24
      },
      "revId": "3a19db4edc0034ac193014f364d63b7374b8f1ed",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}