{
  "comments": [
    {
      "key": {
        "uuid": "5040a3c3_24e03ee4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 11,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-06-23T13:18:23Z",
      "side": 1,
      "message": "Agree here, as this is way to maintain the neighbor information which has proper Endpoint ID (I don\u0027t disagree here for the same maintenance), but we don\u0027t want to use this entries till the EID\u0027s are properly assigned. i.e. Provisional EID stuff is not explained here.",
      "range": {
        "startLine": 10,
        "startChar": 45,
        "endLine": 11,
        "endChar": 26
      },
      "revId": "aaf60312cf8dda74a4092e4dab6459deddc65596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4491617f_ecd68cdf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 11,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-06-29T01:00:23Z",
      "side": 1,
      "message": "The provisional EID concept isn\u0027t explained here because I haven\u0027t yet introduced support for it. The intent of this change is to only implement the routing infrastructure required by DSP0236 but I felt it might be useful to hint at the motivation.",
      "parentUuid": "5040a3c3_24e03ee4",
      "range": {
        "startLine": 10,
        "startChar": 45,
        "endLine": 11,
        "endChar": 26
      },
      "revId": "aaf60312cf8dda74a4092e4dab6459deddc65596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c5b6960_f0d3038f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 11,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-06-29T02:10:07Z",
      "side": 1,
      "message": "One more point to add. I think handling provisional EID, through routing table, will bring unnecessary complexity, as maintenance of the same needs to be done. Instead maintaining an extra Address variable (binding private) in the pkt will be easier to maintain \u0026 directly linked to the packet. This can also serve the purpose of implementing any security related to the packet. \nThoughts?",
      "parentUuid": "4491617f_ecd68cdf",
      "range": {
        "startLine": 10,
        "startChar": 45,
        "endLine": 11,
        "endChar": 26
      },
      "revId": "aaf60312cf8dda74a4092e4dab6459deddc65596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b9da04f_7eb42e4f",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 85,
      "author": {
        "id": 1000461
      },
      "writtenOn": "2020-06-28T23:44:50Z",
      "side": 1,
      "message": "According to \"Table 2 - Special Endpoint IDs\" MCTP_EID_NULL and MCTP_EID_BROADCAST are \"assigned to specific functions for MCTP\" so shouldn\u0027t they be considered *not* valid? Or am I missing something?",
      "range": {
        "startLine": 85,
        "startChar": 8,
        "endLine": 85,
        "endChar": 28
      },
      "revId": "aaf60312cf8dda74a4092e4dab6459deddc65596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7c7c151_083992ef",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 85,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-06-29T01:00:23Z",
      "side": 1,
      "message": "Right, I\u0027m defining valid as \"not reserved\". EIDs 1-7 are reserved, but others have a defined behaviour even if they may not be assignable to a specific endpoint.\n\nSee mctp_eid_is_special() below.",
      "parentUuid": "2b9da04f_7eb42e4f",
      "range": {
        "startLine": 85,
        "startChar": 8,
        "endLine": 85,
        "endChar": 28
      },
      "revId": "aaf60312cf8dda74a4092e4dab6459deddc65596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94c2f205_edf041e0",
        "filename": "core.c",
        "patchSetId": 5
      },
      "lineNbr": 85,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-06-29T02:10:07Z",
      "side": 1,
      "message": "Agree with Andrew here, is_special is there to handle the same.",
      "parentUuid": "d7c7c151_083992ef",
      "range": {
        "startLine": 85,
        "startChar": 8,
        "endLine": 85,
        "endChar": 28
      },
      "revId": "aaf60312cf8dda74a4092e4dab6459deddc65596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb8b90e3_3b9580ba",
        "filename": "libmctp.h",
        "patchSetId": 5
      },
      "lineNbr": 112,
      "author": {
        "id": 1000410
      },
      "writtenOn": "2020-06-29T09:28:11Z",
      "side": 1,
      "message": "Is this for our own endpoint ?",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 112,
        "endChar": 36
      },
      "revId": "aaf60312cf8dda74a4092e4dab6459deddc65596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c310660b_3c5183f7",
        "filename": "libmctp.h",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-06-23T13:18:23Z",
      "side": 1,
      "message": "Clarification: Usage of this one here?\n\nAlso, how the type is mapped to the Entry type of the Get routing table\nTable 27 of routing table format.\n\nThe way i see it, if we are the bridge, then we will just push all the downstream entries. Will skip LOCAL, and maintain it for own purpose right?",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 115,
        "endChar": 34
      },
      "revId": "aaf60312cf8dda74a4092e4dab6459deddc65596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d8c7cb7_0e6f84ae",
        "filename": "libmctp.h",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-06-29T01:00:23Z",
      "side": 1,
      "message": "\u003e Clarification: Usage of this one here?\n\nLargely covered by Section 9.1.6, with the exception of MCTP_ROUTE_TYPE_ENDPOINT which will be used to deliver packets destined for ports attached to the libmctp context.\n\n\u003e Also, how the type is mapped to the Entry type of the Get routing table\nTable 27 of routing table format.\n\nI hadn\u0027t yet looked at Table 27, so thanks for the pointer. I\u0027ll integrate the information necessary to satisfy `Get Routing Table Entries`.\n\n\u003e The way i see it, if we are the bridge, then we will just push all the downstream entries. Will skip LOCAL, and maintain it for own purpose right?\n\nAs explained in 9.1.6, the \"local\" concept is so we can send the target physical address in response to a `Resolve Endpoint ID` query.",
      "parentUuid": "c310660b_3c5183f7",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 115,
        "endChar": 34
      },
      "revId": "aaf60312cf8dda74a4092e4dab6459deddc65596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71668916_35c9fb47",
        "filename": "libmctp.h",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 1000410
      },
      "writtenOn": "2020-06-29T09:28:11Z",
      "side": 1,
      "message": "is this unique id to represent bus ? If yes, shouldn\u0027t we handle auto allocation/de-allocation of new bus id when a user adds/removes route ?",
      "range": {
        "startLine": 118,
        "startChar": 16,
        "endLine": 118,
        "endChar": 58
      },
      "revId": "aaf60312cf8dda74a4092e4dab6459deddc65596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb1fec65_0cab3b54",
        "filename": "libmctp.h",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-06-23T13:18:23Z",
      "side": 1,
      "message": "yes, but wouldn\u0027t be better to make this as uint8_t address[MAX_PHYSICAL_ADDRESS_SIZE]\nReason: Still the code will support vendor defined with a flag.",
      "range": {
        "startLine": 119,
        "startChar": 22,
        "endLine": 119,
        "endChar": 51
      },
      "revId": "aaf60312cf8dda74a4092e4dab6459deddc65596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f37ef9bb_11f01154",
        "filename": "libmctp.h",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-06-23T13:18:23Z",
      "side": 1,
      "message": "routing table is common for all buses right?, so plan is to find the binding type based on the binding_struct ? or shall we maintain a struct variable here?",
      "revId": "aaf60312cf8dda74a4092e4dab6459deddc65596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f010f030_2a30960b",
        "filename": "libmctp.h",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-06-29T01:00:23Z",
      "side": 1,
      "message": "So I guess this comes from your Table 27 comment above. I hadn\u0027t thought about it as mentioned, but I think using the bus index to look through struct mctp_binding to find the type information is the right approach. Lets a) keep together things that are together (i.e. the binding implementation and its type), and b) not duplicate information unnecessarily.",
      "parentUuid": "f37ef9bb_11f01154",
      "revId": "aaf60312cf8dda74a4092e4dab6459deddc65596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62d8e5f2_928b95c7",
        "filename": "libmctp.h",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-06-29T01:00:23Z",
      "side": 1,
      "message": "Yes this might be a better idea if we can determine MAX_PHYSICAL_ADDRESS_SIZE.",
      "parentUuid": "bb1fec65_0cab3b54",
      "range": {
        "startLine": 119,
        "startChar": 22,
        "endLine": 119,
        "endChar": 51
      },
      "revId": "aaf60312cf8dda74a4092e4dab6459deddc65596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17b784f4_8ca97d82",
        "filename": "libmctp.h",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-06-29T02:10:07Z",
      "side": 1,
      "message": "Agree, As binding information based on bus number is not dynamic field, and there is no need to maintain a 1:1 match.\n\nAdd a todo - to define a helper to get binding information based on bus number must be more than enough.",
      "parentUuid": "f010f030_2a30960b",
      "revId": "aaf60312cf8dda74a4092e4dab6459deddc65596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5abecc16_7592bc03",
        "filename": "libmctp.h",
        "patchSetId": 5
      },
      "lineNbr": 119,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-06-29T02:10:07Z",
      "side": 1,
      "message": "No need to change in this patchset, to keep this patchset simple",
      "parentUuid": "62d8e5f2_928b95c7",
      "range": {
        "startLine": 119,
        "startChar": 22,
        "endLine": 119,
        "endChar": 51
      },
      "revId": "aaf60312cf8dda74a4092e4dab6459deddc65596",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}