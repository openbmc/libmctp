{
  "comments": [
    {
      "key": {
        "uuid": "ffd2a079_1d6914ea",
        "filename": "core.c",
        "patchSetId": 2
      },
      "lineNbr": 295,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-12-07T04:33:19Z",
      "side": 1,
      "message": "Suggestion: (to have fewer cycles) to have one inline static function to check in_range() (highlighted one), so that mctp_eid_range_intersects() can be updated to to check routable twice and then followed by in_range 4 times.",
      "range": {
        "startLine": 295,
        "startChar": 8,
        "endLine": 295,
        "endChar": 50
      },
      "revId": "9bac1bf1db2d9f4e7c60e7b78cb9e8fdb7933a8c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c85d174e_92307a3c",
        "filename": "core.c",
        "patchSetId": 2
      },
      "lineNbr": 295,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-12-10T00:21:02Z",
      "side": 1,
      "message": "I think that\u0027s a good optimisation to add later. Trying to go for \"obviously correct\" for now.",
      "parentUuid": "ffd2a079_1d6914ea",
      "range": {
        "startLine": 295,
        "startChar": 8,
        "endLine": 295,
        "endChar": 50
      },
      "revId": "9bac1bf1db2d9f4e7c60e7b78cb9e8fdb7933a8c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24f5911c_91ae0509",
        "filename": "core.c",
        "patchSetId": 2
      },
      "lineNbr": 295,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2021-01-11T06:52:59Z",
      "side": 1,
      "message": "fine with that approach. Hope you have some To-do sheet / issue list, where this is tracked to be done later.",
      "parentUuid": "c85d174e_92307a3c",
      "range": {
        "startLine": 295,
        "startChar": 8,
        "endLine": 295,
        "endChar": 50
      },
      "revId": "9bac1bf1db2d9f4e7c60e7b78cb9e8fdb7933a8c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14030cac_1d974bf7",
        "filename": "libmctp.h",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-12-07T04:33:19Z",
      "side": 1,
      "message": "Planning to add API documentation here?",
      "revId": "9bac1bf1db2d9f4e7c60e7b78cb9e8fdb7933a8c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08f0d63b_b09cbe77",
        "filename": "libmctp.h",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-12-10T00:21:02Z",
      "side": 1,
      "message": "Yep, it\u0027s probably a good time to start adding documentation now that we\u0027ve been through a few iterations of the code.",
      "parentUuid": "14030cac_1d974bf7",
      "revId": "9bac1bf1db2d9f4e7c60e7b78cb9e8fdb7933a8c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f0226a1_0b77719f",
        "filename": "libmctp.h",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2020-11-19T01:24:57Z",
      "side": 1,
      "message": "Why do these need a struct mctp *? You don\u0027t use it anywhere in the implementations,\nand I\u0027d expect the EID conditions to remain independent of any state of the stack.",
      "revId": "9bac1bf1db2d9f4e7c60e7b78cb9e8fdb7933a8c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adf07a01_2809dc65",
        "filename": "libmctp.h",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-11-19T01:47:57Z",
      "side": 1,
      "message": "To handle future spec revisions that take advantage of the reserved EIDs. We\u0027ll need to extract the version in use from the context struct.",
      "parentUuid": "4f0226a1_0b77719f",
      "revId": "9bac1bf1db2d9f4e7c60e7b78cb9e8fdb7933a8c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "133d664c_c1d62e30",
        "filename": "libmctp.h",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2020-11-19T01:55:58Z",
      "side": 1,
      "message": "You\u0027re planning for libmctp to concurrently support multiple spec versions, configured at runtime, *and* expect those versions to not be backwards compatible?\n\nWhile I admire your forward-planning here, I don\u0027t share your pessimism :D",
      "parentUuid": "adf07a01_2809dc65",
      "revId": "9bac1bf1db2d9f4e7c60e7b78cb9e8fdb7933a8c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee7b4354_632224c0",
        "filename": "libmctp.h",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-12-07T04:33:19Z",
      "side": 1,
      "message": "Having future versions of MCTP specification on API is really difficult. It\u0027s better not to make any choices, until we know what is fixed.\n\nNote: I am with the idea of passing mctp structure as argument, such that any customization in terms of Special Endpoint handling can make use of it. But not sure, the usage in terms of eid range/validity check.",
      "parentUuid": "133d664c_c1d62e30",
      "revId": "9bac1bf1db2d9f4e7c60e7b78cb9e8fdb7933a8c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97935fcf_bbc62dd3",
        "filename": "libmctp.h",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-12-10T00:21:02Z",
      "side": 1,
      "message": "\u003e You\u0027re planning for libmctp to concurrently support multiple spec versions\n\nI don\u0027t see a reason to start preventing it :)\n\n\u003e configured at runtime\n\nWell, it\u0027s the choice of the context owner what commands and such they want to support, so it seems reasonable that libmctp should accommodate that where it can.\n\n\u003e expect those versions to not be backwards compatible?\n\nWell, the ranges are reserved, we have no idea how they\u0027ll be used?",
      "parentUuid": "ee7b4354_632224c0",
      "revId": "9bac1bf1db2d9f4e7c60e7b78cb9e8fdb7933a8c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "685d5694_6b5768d5",
        "filename": "libmctp.h",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2021-01-11T06:52:59Z",
      "side": 1,
      "message": "yes, but that\u0027s not going to change the behavior for range_equal, range_intersects or range_contains. \n\nNote: I am still with the idea of passing the argument and fine with the current API.",
      "parentUuid": "97935fcf_bbc62dd3",
      "revId": "9bac1bf1db2d9f4e7c60e7b78cb9e8fdb7933a8c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}