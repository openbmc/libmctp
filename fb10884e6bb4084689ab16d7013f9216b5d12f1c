{
  "comments": [
    {
      "key": {
        "uuid": "e1cd60d9_d03d5605",
        "filename": "core.c",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-12-07T06:58:40Z",
      "side": 1,
      "message": "I understand the benefit it provides, such that route_entry is never freed when in use, but usage like that itself is problem. Once entry is deleted there is no point in holding the entry and we should not use that entry itself. In other words, when we receive routing table update from a bus owner, it is necessary to drop the same, just because someone is holding the entry doesn\u0027t mean they should use it. \nin short, entry search must happen everytime, else if caching / re-use is used, then it is necessary to introduce the validity of the entry, such that stale is not used.",
      "range": {
        "startLine": 53,
        "startChar": 1,
        "endLine": 53,
        "endChar": 20
      },
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "428fd007_30b497aa",
        "filename": "core.c",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-12-10T00:32:41Z",
      "side": 1,
      "message": "\u003e In other words, when we receive routing table update from a bus owner, it is necessary to drop the same, just because someone is holding the entry doesn\u0027t mean they should use it. \n\nHow are you going to tell them to stop?\n\n\u003e in short, entry search must happen everytime, else if caching / re-use is used, then it is necessary to introduce the validity of the entry, such that stale is not used.\n\nDespite your effort here, the race still remains. You can\u0027t have global consistency of the route table with respect to the network when we can only be locally aware of the network state. The races are fundamental to the network. You just have to live with the timeouts.\n\nAs such I don\u0027t plan on changing this implementation. The point of the reference count is for *memory* correctness, nothing further.",
      "parentUuid": "e1cd60d9_d03d5605",
      "range": {
        "startLine": 53,
        "startChar": 1,
        "endLine": 53,
        "endChar": 20
      },
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3bd369b_55fffc94",
        "filename": "core.c",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2021-01-11T07:22:36Z",
      "side": 1,
      "message": "It is necessary to indicate the entry is invalid. Yes, invalid entry will be used by already cached modules, but any new query will result in matching the entry (which is not valid), and still end up in using the same, which must be avoided.\n\nIf it is required only from memory management, then it\u0027s better to introduce the validity flag (to indicate the same), so any new query, even if matched, will be forfeit, due to validity flag.\n\nNote: I am fine to address the same in separate commit too (can track the same using TO-DO or issue list)",
      "parentUuid": "428fd007_30b497aa",
      "range": {
        "startLine": 53,
        "startChar": 1,
        "endLine": 53,
        "endChar": 20
      },
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0f1b0a1_34ae958b",
        "filename": "core.c",
        "patchSetId": 7
      },
      "lineNbr": 53,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-01-18T05:01:47Z",
      "side": 1,
      "message": "\u003e but any new query will result in matching the entry (which is not valid), and still end up in using the same\n\nThis assertion is false, and seems to be the source of your confusion. The value of the `refs` member is *separate* from whether the entry appears in the route table. The only requirement while the entry is in the table is that `refs` is greater than zero. However it is valid for `refs` to be greater than zero and for the entry to *not* be present in the route table.\n\nTo remove an entry from the table, the `next` and `prev` pointers of the entries adjacent to the one being removed are updated to point to each-other\u0027s entry, removing the current entry from the table. At this point, future queries of the table will not see the removed entry, even though it is still a valid object in memory. Only once `refs` has been decremented to zero do we free the memory, but the entry has been removed from the list (potentially) well before this point.\n\nTo demonstrate, this test passes and does not invoke undefined behaviour:\n\n static const struct mctp_route test_add_one \u003d\t{\n        .range \u003d { .first \u003d 8, .last \u003d 8 },\n\t.device \u003d { .bus \u003d 0, .address \u003d 0, },\n\t.type \u003d MCTP_ROUTE_TYPE_LOCAL,\n\t.flags \u003d 0,\n };\n\n\n static void test_mctp_route_table_remove_referenced(void)\n {\n\tconst struct mctp_route *before_remove, *after_remove;\n\tstruct mctp *mctp;\n\tint rc;\n\n\tmctp \u003d mctp_init();\n\tassert(mctp);\n\n\trc \u003d mctp_route_add(mctp, \u0026test_add_one[0]);\n\tassert(!rc);\n\n\tbefore_remove \u003d mctp_route_match(mctp, \u0026test_add_one[0],\n\t\t\t\t \t MCTP_ROUTE_MATCH_ROUTE);\n\tassert(before_remove);\n\n\trc \u003d mctp_route_remove(mctp, \u0026test_add_one[0]);\n\tassert(!rc);\n\n\tafter_remove \u003d mctp_route_match(mctp, \u0026test_add_one[0],\n\t\t\t\t \tMCTP_ROUTE_MATCH_ROUTE);\n\tassert(!after_remove);\n\n\tmctp_route_put(before_remove);\n\n\tmctp_destroy(mctp);\n }\n\nI will add it to the test suite included in this patch to capture the behaviour.",
      "parentUuid": "d3bd369b_55fffc94",
      "range": {
        "startLine": 53,
        "startChar": 1,
        "endLine": 53,
        "endChar": 20
      },
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "443db424_82e1df35",
        "filename": "core.c",
        "patchSetId": 7
      },
      "lineNbr": 327,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-12-07T06:58:40Z",
      "side": 1,
      "message": "Please add null check for a \u0026 b else, better be static",
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ff6ea62_13792d16",
        "filename": "core.c",
        "patchSetId": 7
      },
      "lineNbr": 327,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-12-10T00:32:41Z",
      "side": 1,
      "message": "Thanks for catching that.",
      "parentUuid": "443db424_82e1df35",
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c445f0ea_020c6a4a",
        "filename": "core.c",
        "patchSetId": 7
      },
      "lineNbr": 327,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-01-18T05:01:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ff6ea62_13792d16",
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0c3e53eb_098d8414",
        "filename": "core.c",
        "patchSetId": 7
      },
      "lineNbr": 398,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-12-07T06:58:40Z",
      "side": 1,
      "message": "assert(entry);",
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "988f03d3_2c50bb86",
        "filename": "core.c",
        "patchSetId": 7
      },
      "lineNbr": 398,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-12-10T00:32:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0c3e53eb_098d8414",
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e54060e3_76472967",
        "filename": "core.c",
        "patchSetId": 7
      },
      "lineNbr": 398,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-01-18T05:01:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "988f03d3_2c50bb86",
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d4db512_bb837824",
        "filename": "core.c",
        "patchSetId": 7
      },
      "lineNbr": 649,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-12-07T06:58:40Z",
      "side": 1,
      "message": "How we will make sure, that entry is removed and not used. There can be some code which holds, the entry refs. How we can avoid it using that entry.",
      "range": {
        "startLine": 647,
        "startChar": 0,
        "endLine": 649,
        "endChar": 29
      },
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5133b5d1_2bc82366",
        "filename": "core.c",
        "patchSetId": 7
      },
      "lineNbr": 649,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-12-10T00:32:41Z",
      "side": 1,
      "message": "Hence the reference count. Whenever the other chunk of code stops using the entry, it also does the put, at which point the entry will be freed.",
      "parentUuid": "9d4db512_bb837824",
      "range": {
        "startLine": 647,
        "startChar": 0,
        "endLine": 649,
        "endChar": 29
      },
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cd9e51b_acdc63c9",
        "filename": "core.c",
        "patchSetId": 7
      },
      "lineNbr": 649,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2021-01-11T07:22:36Z",
      "side": 1,
      "message": "This is same as @53, It is ok to use stale entry, but not ok to continuously use it, just because someone doesn\u0027t put the reference entry.",
      "parentUuid": "5133b5d1_2bc82366",
      "range": {
        "startLine": 647,
        "startChar": 0,
        "endLine": 649,
        "endChar": 29
      },
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f76db5f8_b2531a93",
        "filename": "core.c",
        "patchSetId": 7
      },
      "lineNbr": 649,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-01-18T05:01:47Z",
      "side": 1,
      "message": "Can you clarify your comment here with respect to my explanation of the refs behaviour (and test case) above?",
      "parentUuid": "8cd9e51b_acdc63c9",
      "range": {
        "startLine": 647,
        "startChar": 0,
        "endLine": 649,
        "endChar": 29
      },
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b205e0a_75c2be94",
        "filename": "core.c",
        "patchSetId": 7
      },
      "lineNbr": 839,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-12-07T06:58:40Z",
      "side": 1,
      "message": "this needs to be removed",
      "range": {
        "startLine": 839,
        "startChar": 1,
        "endLine": 839,
        "endChar": 29
      },
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bcaf6ed_de4e41df",
        "filename": "core.c",
        "patchSetId": 7
      },
      "lineNbr": 839,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-12-10T00:32:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8b205e0a_75c2be94",
      "range": {
        "startLine": 839,
        "startChar": 1,
        "endLine": 839,
        "endChar": 29
      },
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0eb8e60f_a2352b78",
        "filename": "libmctp.h",
        "patchSetId": 7
      },
      "lineNbr": 98,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-12-07T06:58:40Z",
      "side": 1,
      "message": "Returns the bus ID of the registered binding greater or equal to 0, and negative error code for any error.",
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "673a6ce2_15cddf89",
        "filename": "libmctp.h",
        "patchSetId": 7
      },
      "lineNbr": 98,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-12-10T00:32:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0eb8e60f_a2352b78",
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "793f2c36_5da789ec",
        "filename": "libmctp.h",
        "patchSetId": 7
      },
      "lineNbr": 98,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-01-18T05:01:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "673a6ce2_15cddf89",
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "453ef031_60875839",
        "filename": "libmctp.h",
        "patchSetId": 7
      },
      "lineNbr": 141,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-12-07T06:58:40Z",
      "side": 1,
      "message": "ENDPOINT_SELF or \nSELF",
      "range": {
        "startLine": 141,
        "startChar": 19,
        "endLine": 141,
        "endChar": 28
      },
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af78a184_9d626d65",
        "filename": "libmctp.h",
        "patchSetId": 7
      },
      "lineNbr": 141,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-12-10T00:32:41Z",
      "side": 1,
      "message": "I wish I could s/local/neighbour/ on the spec!",
      "parentUuid": "453ef031_60875839",
      "range": {
        "startLine": 141,
        "startChar": 19,
        "endLine": 141,
        "endChar": 28
      },
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cf355c8_4ad90aa7",
        "filename": "libmctp.h",
        "patchSetId": 7
      },
      "lineNbr": 141,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-01-18T05:01:47Z",
      "side": 1,
      "message": "I\u0027ve changed this to MCTP_ROUTE_TYPE_SELF",
      "parentUuid": "af78a184_9d626d65",
      "range": {
        "startLine": 141,
        "startChar": 19,
        "endLine": 141,
        "endChar": 28
      },
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e61af78_033ce85a",
        "filename": "libmctp.h",
        "patchSetId": 7
      },
      "lineNbr": 143,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-12-07T06:58:40Z",
      "side": 1,
      "message": "can we add --\u003e delivered to the context (self) rather than routed to another",
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13c8e15b_725fc995",
        "filename": "libmctp.h",
        "patchSetId": 7
      },
      "lineNbr": 143,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-12-10T00:32:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0e61af78_033ce85a",
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91367f07_634c773b",
        "filename": "libmctp.h",
        "patchSetId": 7
      },
      "lineNbr": 161,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2020-12-07T07:03:17Z",
      "side": 1,
      "message": "Another thing which is missing is to differentiate Endpoint \u0026 Bridge devices. Planning to address it separately  ?",
      "range": {
        "startLine": 161,
        "startChar": 1,
        "endLine": 161,
        "endChar": 14
      },
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db1ac0dd_58c86a30",
        "filename": "libmctp.h",
        "patchSetId": 7
      },
      "lineNbr": 161,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2020-12-10T00:32:41Z",
      "side": 1,
      "message": "Can you please outline why you think that\u0027s necessary?",
      "parentUuid": "91367f07_634c773b",
      "range": {
        "startLine": 161,
        "startChar": 1,
        "endLine": 161,
        "endChar": 14
      },
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b817759_4750c504",
        "filename": "libmctp.h",
        "patchSetId": 7
      },
      "lineNbr": 161,
      "author": {
        "id": 1000168
      },
      "writtenOn": "2021-01-11T07:22:36Z",
      "side": 1,
      "message": "As discussed in OpenBMC PMCI WG, this is needed so that we can update all the bridge devices, when routing table update happens",
      "parentUuid": "db1ac0dd_58c86a30",
      "range": {
        "startLine": 161,
        "startChar": 1,
        "endLine": 161,
        "endChar": 14
      },
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "817eedf4_55068799",
        "filename": "libmctp.h",
        "patchSetId": 7
      },
      "lineNbr": 161,
      "author": {
        "id": 1000009
      },
      "writtenOn": "2021-01-18T05:01:47Z",
      "side": 1,
      "message": "Sorry, I\u0027ve forgotten the argument. We must write these things down rather than handwave them away with \"as verbally discussed\" (that doesn\u0027t mean we can\u0027t verbally discuss them, just that the arguments need to be written down regardless).\n\nI still can\u0027t see why this distinction is necessary - all devices should become aware of changes to the network.",
      "parentUuid": "2b817759_4750c504",
      "range": {
        "startLine": 161,
        "startChar": 1,
        "endLine": 161,
        "endChar": 14
      },
      "revId": "fb10884e6bb4084689ab16d7013f9216b5d12f1c",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}